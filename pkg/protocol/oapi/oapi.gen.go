// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for BidAuthorType.
const (
	Organization BidAuthorType = "Organization"
	User         BidAuthorType = "User"
)

// Defines values for BidDecision.
const (
	BidDecisionApproved BidDecision = "Approved"
	BidDecisionRejected BidDecision = "Rejected"
)

// Defines values for BidStatus.
const (
	BidStatusApproved  BidStatus = "Approved"
	BidStatusCanceled  BidStatus = "Canceled"
	BidStatusCreated   BidStatus = "Created"
	BidStatusPublished BidStatus = "Published"
	BidStatusRejected  BidStatus = "Rejected"
)

// Defines values for TenderServiceType.
const (
	Construction TenderServiceType = "Construction"
	Delivery     TenderServiceType = "Delivery"
	Manufacture  TenderServiceType = "Manufacture"
)

// Defines values for TenderStatus.
const (
	Closed    TenderStatus = "Closed"
	Created   TenderStatus = "Created"
	Published TenderStatus = "Published"
)

// Bid Информация о предложении
type Bid struct {
	// AuthorId Уникальный идентификатор автора предложения, присвоенный сервером.
	AuthorId BidAuthorId `json:"authorId"`

	// AuthorType Тип автора
	AuthorType BidAuthorType `json:"authorType"`

	// CreatedAt Серверная дата и время в момент, когда пользователь отправил предложение на создание.
	// Передается в формате RFC3339.
	CreatedAt string `json:"createdAt"`

	// Description Описание предложения
	Description BidDescription `json:"description"`

	// Id Уникальный идентификатор предложения, присвоенный сервером.
	Id BidId `json:"id"`

	// Name Полное название предложения
	Name BidName `json:"name"`

	// Status Статус предложения
	Status BidStatus `json:"status"`

	// TenderId Уникальный идентификатор тендера, присвоенный сервером.
	TenderId TenderId `json:"tenderId"`

	// Version Номер версии посел правок
	Version BidVersion `json:"version"`
}

// BidAuthorId Уникальный идентификатор автора предложения, присвоенный сервером.
type BidAuthorId = int32

// BidAuthorType Тип автора
type BidAuthorType string

// BidDecision Решение по предложению
type BidDecision string

// BidDescription Описание предложения
type BidDescription = string

// BidFeedback Отзыв на предложение
type BidFeedback = string

// BidId Уникальный идентификатор предложения, присвоенный сервером.
type BidId = int32

// BidName Полное название предложения
type BidName = string

// BidReview Отзыв о предложении
type BidReview struct {
	// CreatedAt Серверная дата и время в момент, когда пользователь отправил отзыв на предложение.
	// Передается в формате RFC3339.
	CreatedAt string `json:"createdAt"`

	// Description Описание предложения
	Description BidReviewDescription `json:"description"`

	// Id Уникальный идентификатор отзыва, присвоенный сервером.
	Id BidReviewId `json:"id"`
}

// BidReviewDescription Описание предложения
type BidReviewDescription = string

// BidReviewId Уникальный идентификатор отзыва, присвоенный сервером.
type BidReviewId = int32

// BidStatus Статус предложения
type BidStatus string

// BidVersion Номер версии посел правок
type BidVersion = int32

// ErrorResponse Используется для возвращения ошибки пользователю
type ErrorResponse struct {
	// Reason Описание ошибки в свободной форме
	Reason string `json:"reason"`
}

// OrganizationId Уникальный идентификатор организации, присвоенный сервером.
type OrganizationId = int32

// Tender Информация о тендере
type Tender struct {
	// CreatedAt Серверная дата и время в момент, когда пользователь отправил тендер на создание.
	// Передается в формате RFC3339.
	CreatedAt string `json:"createdAt"`

	// Description Описание тендера
	Description TenderDescription `json:"description"`

	// Id Уникальный идентификатор тендера, присвоенный сервером.
	Id TenderId `json:"id"`

	// Name Полное название тендера
	Name TenderName `json:"name"`

	// OrganizationId Уникальный идентификатор организации, присвоенный сервером.
	OrganizationId *OrganizationId `json:"organizationId,omitempty"`

	// ServiceType Вид услуги, к которой относиться тендер
	ServiceType TenderServiceType `json:"serviceType"`

	// Status Статус тендер
	Status TenderStatus `json:"status"`

	// Verstion Номер версии посел правок
	Verstion TenderVersion `json:"verstion"`
}

// TenderDescription Описание тендера
type TenderDescription = string

// TenderId Уникальный идентификатор тендера, присвоенный сервером.
type TenderId = int32

// TenderName Полное название тендера
type TenderName = string

// TenderServiceType Вид услуги, к которой относиться тендер
type TenderServiceType string

// TenderStatus Статус тендер
type TenderStatus string

// TenderVersion Номер версии посел правок
type TenderVersion = int32

// Username Уникальный slug пользователя.
type Username = string

// PaginationLimit defines model for paginationLimit.
type PaginationLimit = int32

// PaginationOffset defines model for paginationOffset.
type PaginationOffset = int32

// GetBidsForTenderParams defines parameters for GetBidsForTender.
type GetBidsForTenderParams struct {
	Username Username `form:"username" json:"username"`

	// Limit Максимальное число возвращаемых объектов. Используется для запросов с пагинацией.
	//
	// Сервер должен возвращать максимальное допустимое число объектов.
	Limit *PaginationLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Какое количество объектов должно быть пропущено с начала. Используется для запросов с пагинацией.
	Offset *PaginationOffset `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetBidReviewsParams defines parameters for GetBidReviews.
type GetBidReviewsParams struct {
	// AuthorUsername Имя пользователя автора предложений, отзывы на которые нужно просмотреть.
	AuthorUsername Username `form:"authorUsername" json:"authorUsername"`

	// RequesterUsername Имя пользователя, который запрашивает отзывы.
	RequesterUsername Username `form:"requesterUsername" json:"requesterUsername"`

	// Limit Максимальное число возвращаемых объектов. Используется для запросов с пагинацией.
	//
	// Сервер должен возвращать максимальное допустимое число объектов.
	Limit *PaginationLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Какое количество объектов должно быть пропущено с начала. Используется для запросов с пагинацией.
	Offset *PaginationOffset `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetUserBidsParams defines parameters for GetUserBids.
type GetUserBidsParams struct {
	// Limit Максимальное число возвращаемых объектов. Используется для запросов с пагинацией.
	//
	// Сервер должен возвращать максимальное допустимое число объектов.
	Limit *PaginationLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Какое количество объектов должно быть пропущено с начала. Используется для запросов с пагинацией.
	Offset   *PaginationOffset `form:"offset,omitempty" json:"offset,omitempty"`
	Username *Username         `form:"username,omitempty" json:"username,omitempty"`
}

// CreateBidJSONBody defines parameters for CreateBid.
type CreateBidJSONBody struct {
	// CreatorUsername Уникальный slug пользователя.
	CreatorUsername Username `json:"creatorUsername"`

	// Description Описание предложения
	Description BidDescription `json:"description"`

	// Name Полное название предложения
	Name BidName `json:"name"`

	// OrganizationId Уникальный идентификатор организации, присвоенный сервером.
	OrganizationId OrganizationId `json:"organizationId"`

	// Status Статус предложения
	Status BidStatus `json:"status"`

	// TenderId Уникальный идентификатор тендера, присвоенный сервером.
	TenderId TenderId `json:"tenderId"`
}

// EditBidJSONBody defines parameters for EditBid.
type EditBidJSONBody struct {
	// Description Описание предложения
	Description *BidDescription `json:"description,omitempty"`

	// Name Полное название предложения
	Name *BidName `json:"name,omitempty"`
}

// EditBidParams defines parameters for EditBid.
type EditBidParams struct {
	Username Username `form:"username" json:"username"`
}

// SubmitBidFeedbackParams defines parameters for SubmitBidFeedback.
type SubmitBidFeedbackParams struct {
	BidFeedback BidFeedback `form:"bidFeedback" json:"bidFeedback"`
	Username    Username    `form:"username" json:"username"`
}

// RollbackBidParams defines parameters for RollbackBid.
type RollbackBidParams struct {
	Username Username `form:"username" json:"username"`
}

// GetBidStatusParams defines parameters for GetBidStatus.
type GetBidStatusParams struct {
	Username Username `form:"username" json:"username"`
}

// UpdateBidStatusParams defines parameters for UpdateBidStatus.
type UpdateBidStatusParams struct {
	Status   BidStatus `form:"status" json:"status"`
	Username Username  `form:"username" json:"username"`
}

// SubmitBidDecisionParams defines parameters for SubmitBidDecision.
type SubmitBidDecisionParams struct {
	Decision BidDecision `form:"decision" json:"decision"`
	Username Username    `form:"username" json:"username"`
}

// GetTendersParams defines parameters for GetTenders.
type GetTendersParams struct {
	// Limit Максимальное число возвращаемых объектов. Используется для запросов с пагинацией.
	//
	// Сервер должен возвращать максимальное допустимое число объектов.
	Limit *PaginationLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Какое количество объектов должно быть пропущено с начала. Используется для запросов с пагинацией.
	Offset *PaginationOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// ServiceType Возвращенные тендеры должны соответствовать указанным видам услуг.
	//
	// Если список пустой, фильтры не применяются.
	ServiceType *[]TenderServiceType `form:"service_type,omitempty" json:"service_type,omitempty"`
}

// GetUserTendersParams defines parameters for GetUserTenders.
type GetUserTendersParams struct {
	// Limit Максимальное число возвращаемых объектов. Используется для запросов с пагинацией.
	//
	// Сервер должен возвращать максимальное допустимое число объектов.
	Limit *PaginationLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Какое количество объектов должно быть пропущено с начала. Используется для запросов с пагинацией.
	Offset   *PaginationOffset `form:"offset,omitempty" json:"offset,omitempty"`
	Username *Username         `form:"username,omitempty" json:"username,omitempty"`
}

// CreateTenderJSONBody defines parameters for CreateTender.
type CreateTenderJSONBody struct {
	// CreatorUsername Уникальный slug пользователя.
	CreatorUsername Username `json:"creatorUsername"`

	// Description Описание тендера
	Description TenderDescription `json:"description"`

	// Name Полное название тендера
	Name TenderName `json:"name"`

	// OrganizationId Уникальный идентификатор организации, присвоенный сервером.
	OrganizationId OrganizationId `json:"organizationId"`

	// ServiceType Вид услуги, к которой относиться тендер
	ServiceType TenderServiceType `json:"serviceType"`

	// Status Статус тендер
	Status TenderStatus `json:"status"`
}

// EditTenderJSONBody defines parameters for EditTender.
type EditTenderJSONBody struct {
	// Description Описание тендера
	Description *TenderDescription `json:"description,omitempty"`

	// Name Полное название тендера
	Name *TenderName `json:"name,omitempty"`

	// ServiceType Вид услуги, к которой относиться тендер
	ServiceType *TenderServiceType `json:"serviceType,omitempty"`
}

// EditTenderParams defines parameters for EditTender.
type EditTenderParams struct {
	Username Username `form:"username" json:"username"`
}

// RollbackTenderParams defines parameters for RollbackTender.
type RollbackTenderParams struct {
	Username Username `form:"username" json:"username"`
}

// GetTenderStatusParams defines parameters for GetTenderStatus.
type GetTenderStatusParams struct {
	Username *Username `form:"username,omitempty" json:"username,omitempty"`
}

// UpdateTenderStatusParams defines parameters for UpdateTenderStatus.
type UpdateTenderStatusParams struct {
	Status   TenderStatus `form:"status" json:"status"`
	Username Username     `form:"username" json:"username"`
}

// CreateBidJSONRequestBody defines body for CreateBid for application/json ContentType.
type CreateBidJSONRequestBody CreateBidJSONBody

// EditBidJSONRequestBody defines body for EditBid for application/json ContentType.
type EditBidJSONRequestBody EditBidJSONBody

// CreateTenderJSONRequestBody defines body for CreateTender for application/json ContentType.
type CreateTenderJSONRequestBody CreateTenderJSONBody

// EditTenderJSONRequestBody defines body for EditTender for application/json ContentType.
type EditTenderJSONRequestBody EditTenderJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetBidsForTender request
	GetBidsForTender(ctx context.Context, tenderId TenderId, params *GetBidsForTenderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBidReviews request
	GetBidReviews(ctx context.Context, tenderId TenderId, params *GetBidReviewsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBids request
	GetUserBids(ctx context.Context, params *GetUserBidsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBidWithBody request with any body
	CreateBidWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBid(ctx context.Context, body CreateBidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditBidWithBody request with any body
	EditBidWithBody(ctx context.Context, bidId BidId, params *EditBidParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditBid(ctx context.Context, bidId BidId, params *EditBidParams, body EditBidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubmitBidFeedback request
	SubmitBidFeedback(ctx context.Context, bidId BidId, params *SubmitBidFeedbackParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RollbackBid request
	RollbackBid(ctx context.Context, bidId BidId, version int32, params *RollbackBidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBidStatus request
	GetBidStatus(ctx context.Context, bidId BidId, params *GetBidStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateBidStatus request
	UpdateBidStatus(ctx context.Context, bidId BidId, params *UpdateBidStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubmitBidDecision request
	SubmitBidDecision(ctx context.Context, bidId BidId, params *SubmitBidDecisionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CheckServer request
	CheckServer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTenders request
	GetTenders(ctx context.Context, params *GetTendersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserTenders request
	GetUserTenders(ctx context.Context, params *GetUserTendersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTenderWithBody request with any body
	CreateTenderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTender(ctx context.Context, body CreateTenderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditTenderWithBody request with any body
	EditTenderWithBody(ctx context.Context, tenderId TenderId, params *EditTenderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditTender(ctx context.Context, tenderId TenderId, params *EditTenderParams, body EditTenderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RollbackTender request
	RollbackTender(ctx context.Context, tenderId TenderId, version int32, params *RollbackTenderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTenderStatus request
	GetTenderStatus(ctx context.Context, tenderId TenderId, params *GetTenderStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTenderStatus request
	UpdateTenderStatus(ctx context.Context, tenderId TenderId, params *UpdateTenderStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetBidsForTender(ctx context.Context, tenderId TenderId, params *GetBidsForTenderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBidsForTenderRequest(c.Server, tenderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBidReviews(ctx context.Context, tenderId TenderId, params *GetBidReviewsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBidReviewsRequest(c.Server, tenderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBids(ctx context.Context, params *GetUserBidsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBidsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBidWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBidRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBid(ctx context.Context, body CreateBidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBidRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditBidWithBody(ctx context.Context, bidId BidId, params *EditBidParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditBidRequestWithBody(c.Server, bidId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditBid(ctx context.Context, bidId BidId, params *EditBidParams, body EditBidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditBidRequest(c.Server, bidId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitBidFeedback(ctx context.Context, bidId BidId, params *SubmitBidFeedbackParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitBidFeedbackRequest(c.Server, bidId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RollbackBid(ctx context.Context, bidId BidId, version int32, params *RollbackBidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRollbackBidRequest(c.Server, bidId, version, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBidStatus(ctx context.Context, bidId BidId, params *GetBidStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBidStatusRequest(c.Server, bidId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateBidStatus(ctx context.Context, bidId BidId, params *UpdateBidStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateBidStatusRequest(c.Server, bidId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitBidDecision(ctx context.Context, bidId BidId, params *SubmitBidDecisionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitBidDecisionRequest(c.Server, bidId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckServer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckServerRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTenders(ctx context.Context, params *GetTendersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTendersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserTenders(ctx context.Context, params *GetUserTendersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserTendersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTenderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTenderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTender(ctx context.Context, body CreateTenderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTenderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditTenderWithBody(ctx context.Context, tenderId TenderId, params *EditTenderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditTenderRequestWithBody(c.Server, tenderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditTender(ctx context.Context, tenderId TenderId, params *EditTenderParams, body EditTenderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditTenderRequest(c.Server, tenderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RollbackTender(ctx context.Context, tenderId TenderId, version int32, params *RollbackTenderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRollbackTenderRequest(c.Server, tenderId, version, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTenderStatus(ctx context.Context, tenderId TenderId, params *GetTenderStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTenderStatusRequest(c.Server, tenderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTenderStatus(ctx context.Context, tenderId TenderId, params *UpdateTenderStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTenderStatusRequest(c.Server, tenderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetBidsForTenderRequest generates requests for GetBidsForTender
func NewGetBidsForTenderRequest(server string, tenderId TenderId, params *GetBidsForTenderParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenderId", runtime.ParamLocationPath, tenderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bids-tender/%s/list", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, params.Username); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBidReviewsRequest generates requests for GetBidReviews
func NewGetBidReviewsRequest(server string, tenderId TenderId, params *GetBidReviewsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenderId", runtime.ParamLocationPath, tenderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bids-tender/%s/reviews", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authorUsername", runtime.ParamLocationQuery, params.AuthorUsername); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requesterUsername", runtime.ParamLocationQuery, params.RequesterUsername); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBidsRequest generates requests for GetUserBids
func NewGetUserBidsRequest(server string, params *GetUserBidsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bids/my")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Username != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateBidRequest calls the generic CreateBid builder with application/json body
func NewCreateBidRequest(server string, body CreateBidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBidRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateBidRequestWithBody generates requests for CreateBid with any type of body
func NewCreateBidRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bids/new")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEditBidRequest calls the generic EditBid builder with application/json body
func NewEditBidRequest(server string, bidId BidId, params *EditBidParams, body EditBidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditBidRequestWithBody(server, bidId, params, "application/json", bodyReader)
}

// NewEditBidRequestWithBody generates requests for EditBid with any type of body
func NewEditBidRequestWithBody(server string, bidId BidId, params *EditBidParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bidId", runtime.ParamLocationPath, bidId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bids/%s/edit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, params.Username); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSubmitBidFeedbackRequest generates requests for SubmitBidFeedback
func NewSubmitBidFeedbackRequest(server string, bidId BidId, params *SubmitBidFeedbackParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bidId", runtime.ParamLocationPath, bidId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bids/%s/feedback", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bidFeedback", runtime.ParamLocationQuery, params.BidFeedback); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, params.Username); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRollbackBidRequest generates requests for RollbackBid
func NewRollbackBidRequest(server string, bidId BidId, version int32, params *RollbackBidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bidId", runtime.ParamLocationPath, bidId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bids/%s/rollback/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, params.Username); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBidStatusRequest generates requests for GetBidStatus
func NewGetBidStatusRequest(server string, bidId BidId, params *GetBidStatusParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bidId", runtime.ParamLocationPath, bidId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bids/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, params.Username); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateBidStatusRequest generates requests for UpdateBidStatus
func NewUpdateBidStatusRequest(server string, bidId BidId, params *UpdateBidStatusParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bidId", runtime.ParamLocationPath, bidId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bids/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, params.Username); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSubmitBidDecisionRequest generates requests for SubmitBidDecision
func NewSubmitBidDecisionRequest(server string, bidId BidId, params *SubmitBidDecisionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bidId", runtime.ParamLocationPath, bidId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bids/%s/submit_decision", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "decision", runtime.ParamLocationQuery, params.Decision); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, params.Username); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCheckServerRequest generates requests for CheckServer
func NewCheckServerRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTendersRequest generates requests for GetTenders
func NewGetTendersRequest(server string, params *GetTendersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_type", runtime.ParamLocationQuery, *params.ServiceType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserTendersRequest generates requests for GetUserTenders
func NewGetUserTendersRequest(server string, params *GetUserTendersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenders/my")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Username != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTenderRequest calls the generic CreateTender builder with application/json body
func NewCreateTenderRequest(server string, body CreateTenderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTenderRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateTenderRequestWithBody generates requests for CreateTender with any type of body
func NewCreateTenderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenders/new")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEditTenderRequest calls the generic EditTender builder with application/json body
func NewEditTenderRequest(server string, tenderId TenderId, params *EditTenderParams, body EditTenderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditTenderRequestWithBody(server, tenderId, params, "application/json", bodyReader)
}

// NewEditTenderRequestWithBody generates requests for EditTender with any type of body
func NewEditTenderRequestWithBody(server string, tenderId TenderId, params *EditTenderParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenderId", runtime.ParamLocationPath, tenderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenders/%s/edit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, params.Username); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRollbackTenderRequest generates requests for RollbackTender
func NewRollbackTenderRequest(server string, tenderId TenderId, version int32, params *RollbackTenderParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenderId", runtime.ParamLocationPath, tenderId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenders/%s/rollback/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, params.Username); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTenderStatusRequest generates requests for GetTenderStatus
func NewGetTenderStatusRequest(server string, tenderId TenderId, params *GetTenderStatusParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenderId", runtime.ParamLocationPath, tenderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenders/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Username != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTenderStatusRequest generates requests for UpdateTenderStatus
func NewUpdateTenderStatusRequest(server string, tenderId TenderId, params *UpdateTenderStatusParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenderId", runtime.ParamLocationPath, tenderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenders/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, params.Username); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetBidsForTenderWithResponse request
	GetBidsForTenderWithResponse(ctx context.Context, tenderId TenderId, params *GetBidsForTenderParams, reqEditors ...RequestEditorFn) (*GetBidsForTenderResponse, error)

	// GetBidReviewsWithResponse request
	GetBidReviewsWithResponse(ctx context.Context, tenderId TenderId, params *GetBidReviewsParams, reqEditors ...RequestEditorFn) (*GetBidReviewsResponse, error)

	// GetUserBidsWithResponse request
	GetUserBidsWithResponse(ctx context.Context, params *GetUserBidsParams, reqEditors ...RequestEditorFn) (*GetUserBidsResponse, error)

	// CreateBidWithBodyWithResponse request with any body
	CreateBidWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBidResponse, error)

	CreateBidWithResponse(ctx context.Context, body CreateBidJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBidResponse, error)

	// EditBidWithBodyWithResponse request with any body
	EditBidWithBodyWithResponse(ctx context.Context, bidId BidId, params *EditBidParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditBidResponse, error)

	EditBidWithResponse(ctx context.Context, bidId BidId, params *EditBidParams, body EditBidJSONRequestBody, reqEditors ...RequestEditorFn) (*EditBidResponse, error)

	// SubmitBidFeedbackWithResponse request
	SubmitBidFeedbackWithResponse(ctx context.Context, bidId BidId, params *SubmitBidFeedbackParams, reqEditors ...RequestEditorFn) (*SubmitBidFeedbackResponse, error)

	// RollbackBidWithResponse request
	RollbackBidWithResponse(ctx context.Context, bidId BidId, version int32, params *RollbackBidParams, reqEditors ...RequestEditorFn) (*RollbackBidResponse, error)

	// GetBidStatusWithResponse request
	GetBidStatusWithResponse(ctx context.Context, bidId BidId, params *GetBidStatusParams, reqEditors ...RequestEditorFn) (*GetBidStatusResponse, error)

	// UpdateBidStatusWithResponse request
	UpdateBidStatusWithResponse(ctx context.Context, bidId BidId, params *UpdateBidStatusParams, reqEditors ...RequestEditorFn) (*UpdateBidStatusResponse, error)

	// SubmitBidDecisionWithResponse request
	SubmitBidDecisionWithResponse(ctx context.Context, bidId BidId, params *SubmitBidDecisionParams, reqEditors ...RequestEditorFn) (*SubmitBidDecisionResponse, error)

	// CheckServerWithResponse request
	CheckServerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CheckServerResponse, error)

	// GetTendersWithResponse request
	GetTendersWithResponse(ctx context.Context, params *GetTendersParams, reqEditors ...RequestEditorFn) (*GetTendersResponse, error)

	// GetUserTendersWithResponse request
	GetUserTendersWithResponse(ctx context.Context, params *GetUserTendersParams, reqEditors ...RequestEditorFn) (*GetUserTendersResponse, error)

	// CreateTenderWithBodyWithResponse request with any body
	CreateTenderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTenderResponse, error)

	CreateTenderWithResponse(ctx context.Context, body CreateTenderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTenderResponse, error)

	// EditTenderWithBodyWithResponse request with any body
	EditTenderWithBodyWithResponse(ctx context.Context, tenderId TenderId, params *EditTenderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditTenderResponse, error)

	EditTenderWithResponse(ctx context.Context, tenderId TenderId, params *EditTenderParams, body EditTenderJSONRequestBody, reqEditors ...RequestEditorFn) (*EditTenderResponse, error)

	// RollbackTenderWithResponse request
	RollbackTenderWithResponse(ctx context.Context, tenderId TenderId, version int32, params *RollbackTenderParams, reqEditors ...RequestEditorFn) (*RollbackTenderResponse, error)

	// GetTenderStatusWithResponse request
	GetTenderStatusWithResponse(ctx context.Context, tenderId TenderId, params *GetTenderStatusParams, reqEditors ...RequestEditorFn) (*GetTenderStatusResponse, error)

	// UpdateTenderStatusWithResponse request
	UpdateTenderStatusWithResponse(ctx context.Context, tenderId TenderId, params *UpdateTenderStatusParams, reqEditors ...RequestEditorFn) (*UpdateTenderStatusResponse, error)
}

type GetBidsForTenderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Bid
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetBidsForTenderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBidsForTenderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBidReviewsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BidReview
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetBidReviewsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBidReviewsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBidsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Bid
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUserBidsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBidsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Bid
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateBidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditBidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Bid
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r EditBidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditBidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubmitBidFeedbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Bid
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SubmitBidFeedbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubmitBidFeedbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RollbackBidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Bid
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RollbackBidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RollbackBidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBidStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BidStatus
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetBidStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBidStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateBidStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Bid
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateBidStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateBidStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubmitBidDecisionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Bid
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SubmitBidDecisionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubmitBidDecisionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CheckServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTendersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Tender
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTendersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTendersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserTendersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Tender
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUserTendersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserTendersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTenderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tender
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateTenderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTenderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditTenderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tender
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r EditTenderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditTenderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RollbackTenderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tender
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RollbackTenderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RollbackTenderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTenderStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TenderStatus
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTenderStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTenderStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTenderStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tender
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateTenderStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTenderStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetBidsForTenderWithResponse request returning *GetBidsForTenderResponse
func (c *ClientWithResponses) GetBidsForTenderWithResponse(ctx context.Context, tenderId TenderId, params *GetBidsForTenderParams, reqEditors ...RequestEditorFn) (*GetBidsForTenderResponse, error) {
	rsp, err := c.GetBidsForTender(ctx, tenderId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBidsForTenderResponse(rsp)
}

// GetBidReviewsWithResponse request returning *GetBidReviewsResponse
func (c *ClientWithResponses) GetBidReviewsWithResponse(ctx context.Context, tenderId TenderId, params *GetBidReviewsParams, reqEditors ...RequestEditorFn) (*GetBidReviewsResponse, error) {
	rsp, err := c.GetBidReviews(ctx, tenderId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBidReviewsResponse(rsp)
}

// GetUserBidsWithResponse request returning *GetUserBidsResponse
func (c *ClientWithResponses) GetUserBidsWithResponse(ctx context.Context, params *GetUserBidsParams, reqEditors ...RequestEditorFn) (*GetUserBidsResponse, error) {
	rsp, err := c.GetUserBids(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBidsResponse(rsp)
}

// CreateBidWithBodyWithResponse request with arbitrary body returning *CreateBidResponse
func (c *ClientWithResponses) CreateBidWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBidResponse, error) {
	rsp, err := c.CreateBidWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBidResponse(rsp)
}

func (c *ClientWithResponses) CreateBidWithResponse(ctx context.Context, body CreateBidJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBidResponse, error) {
	rsp, err := c.CreateBid(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBidResponse(rsp)
}

// EditBidWithBodyWithResponse request with arbitrary body returning *EditBidResponse
func (c *ClientWithResponses) EditBidWithBodyWithResponse(ctx context.Context, bidId BidId, params *EditBidParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditBidResponse, error) {
	rsp, err := c.EditBidWithBody(ctx, bidId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditBidResponse(rsp)
}

func (c *ClientWithResponses) EditBidWithResponse(ctx context.Context, bidId BidId, params *EditBidParams, body EditBidJSONRequestBody, reqEditors ...RequestEditorFn) (*EditBidResponse, error) {
	rsp, err := c.EditBid(ctx, bidId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditBidResponse(rsp)
}

// SubmitBidFeedbackWithResponse request returning *SubmitBidFeedbackResponse
func (c *ClientWithResponses) SubmitBidFeedbackWithResponse(ctx context.Context, bidId BidId, params *SubmitBidFeedbackParams, reqEditors ...RequestEditorFn) (*SubmitBidFeedbackResponse, error) {
	rsp, err := c.SubmitBidFeedback(ctx, bidId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitBidFeedbackResponse(rsp)
}

// RollbackBidWithResponse request returning *RollbackBidResponse
func (c *ClientWithResponses) RollbackBidWithResponse(ctx context.Context, bidId BidId, version int32, params *RollbackBidParams, reqEditors ...RequestEditorFn) (*RollbackBidResponse, error) {
	rsp, err := c.RollbackBid(ctx, bidId, version, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRollbackBidResponse(rsp)
}

// GetBidStatusWithResponse request returning *GetBidStatusResponse
func (c *ClientWithResponses) GetBidStatusWithResponse(ctx context.Context, bidId BidId, params *GetBidStatusParams, reqEditors ...RequestEditorFn) (*GetBidStatusResponse, error) {
	rsp, err := c.GetBidStatus(ctx, bidId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBidStatusResponse(rsp)
}

// UpdateBidStatusWithResponse request returning *UpdateBidStatusResponse
func (c *ClientWithResponses) UpdateBidStatusWithResponse(ctx context.Context, bidId BidId, params *UpdateBidStatusParams, reqEditors ...RequestEditorFn) (*UpdateBidStatusResponse, error) {
	rsp, err := c.UpdateBidStatus(ctx, bidId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateBidStatusResponse(rsp)
}

// SubmitBidDecisionWithResponse request returning *SubmitBidDecisionResponse
func (c *ClientWithResponses) SubmitBidDecisionWithResponse(ctx context.Context, bidId BidId, params *SubmitBidDecisionParams, reqEditors ...RequestEditorFn) (*SubmitBidDecisionResponse, error) {
	rsp, err := c.SubmitBidDecision(ctx, bidId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitBidDecisionResponse(rsp)
}

// CheckServerWithResponse request returning *CheckServerResponse
func (c *ClientWithResponses) CheckServerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CheckServerResponse, error) {
	rsp, err := c.CheckServer(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckServerResponse(rsp)
}

// GetTendersWithResponse request returning *GetTendersResponse
func (c *ClientWithResponses) GetTendersWithResponse(ctx context.Context, params *GetTendersParams, reqEditors ...RequestEditorFn) (*GetTendersResponse, error) {
	rsp, err := c.GetTenders(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTendersResponse(rsp)
}

// GetUserTendersWithResponse request returning *GetUserTendersResponse
func (c *ClientWithResponses) GetUserTendersWithResponse(ctx context.Context, params *GetUserTendersParams, reqEditors ...RequestEditorFn) (*GetUserTendersResponse, error) {
	rsp, err := c.GetUserTenders(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserTendersResponse(rsp)
}

// CreateTenderWithBodyWithResponse request with arbitrary body returning *CreateTenderResponse
func (c *ClientWithResponses) CreateTenderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTenderResponse, error) {
	rsp, err := c.CreateTenderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTenderResponse(rsp)
}

func (c *ClientWithResponses) CreateTenderWithResponse(ctx context.Context, body CreateTenderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTenderResponse, error) {
	rsp, err := c.CreateTender(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTenderResponse(rsp)
}

// EditTenderWithBodyWithResponse request with arbitrary body returning *EditTenderResponse
func (c *ClientWithResponses) EditTenderWithBodyWithResponse(ctx context.Context, tenderId TenderId, params *EditTenderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditTenderResponse, error) {
	rsp, err := c.EditTenderWithBody(ctx, tenderId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditTenderResponse(rsp)
}

func (c *ClientWithResponses) EditTenderWithResponse(ctx context.Context, tenderId TenderId, params *EditTenderParams, body EditTenderJSONRequestBody, reqEditors ...RequestEditorFn) (*EditTenderResponse, error) {
	rsp, err := c.EditTender(ctx, tenderId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditTenderResponse(rsp)
}

// RollbackTenderWithResponse request returning *RollbackTenderResponse
func (c *ClientWithResponses) RollbackTenderWithResponse(ctx context.Context, tenderId TenderId, version int32, params *RollbackTenderParams, reqEditors ...RequestEditorFn) (*RollbackTenderResponse, error) {
	rsp, err := c.RollbackTender(ctx, tenderId, version, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRollbackTenderResponse(rsp)
}

// GetTenderStatusWithResponse request returning *GetTenderStatusResponse
func (c *ClientWithResponses) GetTenderStatusWithResponse(ctx context.Context, tenderId TenderId, params *GetTenderStatusParams, reqEditors ...RequestEditorFn) (*GetTenderStatusResponse, error) {
	rsp, err := c.GetTenderStatus(ctx, tenderId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTenderStatusResponse(rsp)
}

// UpdateTenderStatusWithResponse request returning *UpdateTenderStatusResponse
func (c *ClientWithResponses) UpdateTenderStatusWithResponse(ctx context.Context, tenderId TenderId, params *UpdateTenderStatusParams, reqEditors ...RequestEditorFn) (*UpdateTenderStatusResponse, error) {
	rsp, err := c.UpdateTenderStatus(ctx, tenderId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTenderStatusResponse(rsp)
}

// ParseGetBidsForTenderResponse parses an HTTP response from a GetBidsForTenderWithResponse call
func ParseGetBidsForTenderResponse(rsp *http.Response) (*GetBidsForTenderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBidsForTenderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Bid
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetBidReviewsResponse parses an HTTP response from a GetBidReviewsWithResponse call
func ParseGetBidReviewsResponse(rsp *http.Response) (*GetBidReviewsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBidReviewsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BidReview
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserBidsResponse parses an HTTP response from a GetUserBidsWithResponse call
func ParseGetUserBidsResponse(rsp *http.Response) (*GetUserBidsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBidsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Bid
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseCreateBidResponse parses an HTTP response from a CreateBidWithResponse call
func ParseCreateBidResponse(rsp *http.Response) (*CreateBidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Bid
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseEditBidResponse parses an HTTP response from a EditBidWithResponse call
func ParseEditBidResponse(rsp *http.Response) (*EditBidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditBidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Bid
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseSubmitBidFeedbackResponse parses an HTTP response from a SubmitBidFeedbackWithResponse call
func ParseSubmitBidFeedbackResponse(rsp *http.Response) (*SubmitBidFeedbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubmitBidFeedbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Bid
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRollbackBidResponse parses an HTTP response from a RollbackBidWithResponse call
func ParseRollbackBidResponse(rsp *http.Response) (*RollbackBidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RollbackBidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Bid
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetBidStatusResponse parses an HTTP response from a GetBidStatusWithResponse call
func ParseGetBidStatusResponse(rsp *http.Response) (*GetBidStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBidStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BidStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseUpdateBidStatusResponse parses an HTTP response from a UpdateBidStatusWithResponse call
func ParseUpdateBidStatusResponse(rsp *http.Response) (*UpdateBidStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateBidStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Bid
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseSubmitBidDecisionResponse parses an HTTP response from a SubmitBidDecisionWithResponse call
func ParseSubmitBidDecisionResponse(rsp *http.Response) (*SubmitBidDecisionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubmitBidDecisionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Bid
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCheckServerResponse parses an HTTP response from a CheckServerWithResponse call
func ParseCheckServerResponse(rsp *http.Response) (*CheckServerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetTendersResponse parses an HTTP response from a GetTendersWithResponse call
func ParseGetTendersResponse(rsp *http.Response) (*GetTendersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTendersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Tender
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserTendersResponse parses an HTTP response from a GetUserTendersWithResponse call
func ParseGetUserTendersResponse(rsp *http.Response) (*GetUserTendersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserTendersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Tender
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseCreateTenderResponse parses an HTTP response from a CreateTenderWithResponse call
func ParseCreateTenderResponse(rsp *http.Response) (*CreateTenderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTenderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tender
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseEditTenderResponse parses an HTTP response from a EditTenderWithResponse call
func ParseEditTenderResponse(rsp *http.Response) (*EditTenderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditTenderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tender
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseRollbackTenderResponse parses an HTTP response from a RollbackTenderWithResponse call
func ParseRollbackTenderResponse(rsp *http.Response) (*RollbackTenderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RollbackTenderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tender
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetTenderStatusResponse parses an HTTP response from a GetTenderStatusWithResponse call
func ParseGetTenderStatusResponse(rsp *http.Response) (*GetTenderStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTenderStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TenderStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseUpdateTenderStatusResponse parses an HTTP response from a UpdateTenderStatusWithResponse call
func ParseUpdateTenderStatusResponse(rsp *http.Response) (*UpdateTenderStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTenderStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tender
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получение списка предложений для тендера
	// (GET /bids-tender/{tenderId}/list)
	GetBidsForTender(c *gin.Context, tenderId TenderId, params GetBidsForTenderParams)
	// Просмотр отзывов на прошлые предложения
	// (GET /bids-tender/{tenderId}/reviews)
	GetBidReviews(c *gin.Context, tenderId TenderId, params GetBidReviewsParams)
	// Получение списка ваших предложений
	// (GET /bids/my)
	GetUserBids(c *gin.Context, params GetUserBidsParams)
	// Создание нового предложения
	// (POST /bids/new)
	CreateBid(c *gin.Context)
	// Редактирование параметров предложения
	// (PATCH /bids/{bidId}/edit)
	EditBid(c *gin.Context, bidId BidId, params EditBidParams)
	// Отправка отзыва по предложению
	// (PUT /bids/{bidId}/feedback)
	SubmitBidFeedback(c *gin.Context, bidId BidId, params SubmitBidFeedbackParams)
	// Откат версии предложения
	// (PUT /bids/{bidId}/rollback/{version})
	RollbackBid(c *gin.Context, bidId BidId, version int32, params RollbackBidParams)
	// Получение текущего статуса предложения
	// (GET /bids/{bidId}/status)
	GetBidStatus(c *gin.Context, bidId BidId, params GetBidStatusParams)
	// Изменение статуса предложения
	// (PUT /bids/{bidId}/status)
	UpdateBidStatus(c *gin.Context, bidId BidId, params UpdateBidStatusParams)
	// Отправка решения по предложению
	// (PUT /bids/{bidId}/submit_decision)
	SubmitBidDecision(c *gin.Context, bidId BidId, params SubmitBidDecisionParams)
	// Проверка доступности сервера
	// (GET /ping)
	CheckServer(c *gin.Context)
	// Получение списка тендеров
	// (GET /tenders)
	GetTenders(c *gin.Context, params GetTendersParams)
	// Получить тендеры пользователя
	// (GET /tenders/my)
	GetUserTenders(c *gin.Context, params GetUserTendersParams)
	// Создание нового тендера
	// (POST /tenders/new)
	CreateTender(c *gin.Context)
	// Редактирование тендера
	// (PATCH /tenders/{tenderId}/edit)
	EditTender(c *gin.Context, tenderId TenderId, params EditTenderParams)
	// Откат версии тендера
	// (PUT /tenders/{tenderId}/rollback/{version})
	RollbackTender(c *gin.Context, tenderId TenderId, version int32, params RollbackTenderParams)
	// Получение текущего статуса тендера
	// (GET /tenders/{tenderId}/status)
	GetTenderStatus(c *gin.Context, tenderId TenderId, params GetTenderStatusParams)
	// Изменение статуса тендера
	// (PUT /tenders/{tenderId}/status)
	UpdateTenderStatus(c *gin.Context, tenderId TenderId, params UpdateTenderStatusParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetBidsForTender operation middleware
func (siw *ServerInterfaceWrapper) GetBidsForTender(c *gin.Context) {

	var err error

	// ------------- Path parameter "tenderId" -------------
	var tenderId TenderId

	err = runtime.BindStyledParameterWithOptions("simple", "tenderId", c.Param("tenderId"), &tenderId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tenderId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBidsForTenderParams

	// ------------- Required query parameter "username" -------------

	if paramValue := c.Query("username"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument username is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "username", c.Request.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter username: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBidsForTender(c, tenderId, params)
}

// GetBidReviews operation middleware
func (siw *ServerInterfaceWrapper) GetBidReviews(c *gin.Context) {

	var err error

	// ------------- Path parameter "tenderId" -------------
	var tenderId TenderId

	err = runtime.BindStyledParameterWithOptions("simple", "tenderId", c.Param("tenderId"), &tenderId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tenderId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBidReviewsParams

	// ------------- Required query parameter "authorUsername" -------------

	if paramValue := c.Query("authorUsername"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument authorUsername is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "authorUsername", c.Request.URL.Query(), &params.AuthorUsername)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter authorUsername: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "requesterUsername" -------------

	if paramValue := c.Query("requesterUsername"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument requesterUsername is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "requesterUsername", c.Request.URL.Query(), &params.RequesterUsername)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter requesterUsername: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBidReviews(c, tenderId, params)
}

// GetUserBids operation middleware
func (siw *ServerInterfaceWrapper) GetUserBids(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserBidsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", c.Request.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter username: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserBids(c, params)
}

// CreateBid operation middleware
func (siw *ServerInterfaceWrapper) CreateBid(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateBid(c)
}

// EditBid operation middleware
func (siw *ServerInterfaceWrapper) EditBid(c *gin.Context) {

	var err error

	// ------------- Path parameter "bidId" -------------
	var bidId BidId

	err = runtime.BindStyledParameterWithOptions("simple", "bidId", c.Param("bidId"), &bidId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bidId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params EditBidParams

	// ------------- Required query parameter "username" -------------

	if paramValue := c.Query("username"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument username is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "username", c.Request.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter username: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EditBid(c, bidId, params)
}

// SubmitBidFeedback operation middleware
func (siw *ServerInterfaceWrapper) SubmitBidFeedback(c *gin.Context) {

	var err error

	// ------------- Path parameter "bidId" -------------
	var bidId BidId

	err = runtime.BindStyledParameterWithOptions("simple", "bidId", c.Param("bidId"), &bidId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bidId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SubmitBidFeedbackParams

	// ------------- Required query parameter "bidFeedback" -------------

	if paramValue := c.Query("bidFeedback"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument bidFeedback is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "bidFeedback", c.Request.URL.Query(), &params.BidFeedback)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bidFeedback: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "username" -------------

	if paramValue := c.Query("username"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument username is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "username", c.Request.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter username: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SubmitBidFeedback(c, bidId, params)
}

// RollbackBid operation middleware
func (siw *ServerInterfaceWrapper) RollbackBid(c *gin.Context) {

	var err error

	// ------------- Path parameter "bidId" -------------
	var bidId BidId

	err = runtime.BindStyledParameterWithOptions("simple", "bidId", c.Param("bidId"), &bidId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bidId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version int32

	err = runtime.BindStyledParameterWithOptions("simple", "version", c.Param("version"), &version, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params RollbackBidParams

	// ------------- Required query parameter "username" -------------

	if paramValue := c.Query("username"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument username is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "username", c.Request.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter username: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RollbackBid(c, bidId, version, params)
}

// GetBidStatus operation middleware
func (siw *ServerInterfaceWrapper) GetBidStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "bidId" -------------
	var bidId BidId

	err = runtime.BindStyledParameterWithOptions("simple", "bidId", c.Param("bidId"), &bidId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bidId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBidStatusParams

	// ------------- Required query parameter "username" -------------

	if paramValue := c.Query("username"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument username is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "username", c.Request.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter username: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBidStatus(c, bidId, params)
}

// UpdateBidStatus operation middleware
func (siw *ServerInterfaceWrapper) UpdateBidStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "bidId" -------------
	var bidId BidId

	err = runtime.BindStyledParameterWithOptions("simple", "bidId", c.Param("bidId"), &bidId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bidId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateBidStatusParams

	// ------------- Required query parameter "status" -------------

	if paramValue := c.Query("status"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument status is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "username" -------------

	if paramValue := c.Query("username"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument username is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "username", c.Request.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter username: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateBidStatus(c, bidId, params)
}

// SubmitBidDecision operation middleware
func (siw *ServerInterfaceWrapper) SubmitBidDecision(c *gin.Context) {

	var err error

	// ------------- Path parameter "bidId" -------------
	var bidId BidId

	err = runtime.BindStyledParameterWithOptions("simple", "bidId", c.Param("bidId"), &bidId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bidId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SubmitBidDecisionParams

	// ------------- Required query parameter "decision" -------------

	if paramValue := c.Query("decision"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument decision is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "decision", c.Request.URL.Query(), &params.Decision)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter decision: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "username" -------------

	if paramValue := c.Query("username"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument username is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "username", c.Request.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter username: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SubmitBidDecision(c, bidId, params)
}

// CheckServer operation middleware
func (siw *ServerInterfaceWrapper) CheckServer(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CheckServer(c)
}

// GetTenders operation middleware
func (siw *ServerInterfaceWrapper) GetTenders(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTendersParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "service_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "service_type", c.Request.URL.Query(), &params.ServiceType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter service_type: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTenders(c, params)
}

// GetUserTenders operation middleware
func (siw *ServerInterfaceWrapper) GetUserTenders(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserTendersParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", c.Request.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter username: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserTenders(c, params)
}

// CreateTender operation middleware
func (siw *ServerInterfaceWrapper) CreateTender(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateTender(c)
}

// EditTender operation middleware
func (siw *ServerInterfaceWrapper) EditTender(c *gin.Context) {

	var err error

	// ------------- Path parameter "tenderId" -------------
	var tenderId TenderId

	err = runtime.BindStyledParameterWithOptions("simple", "tenderId", c.Param("tenderId"), &tenderId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tenderId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params EditTenderParams

	// ------------- Required query parameter "username" -------------

	if paramValue := c.Query("username"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument username is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "username", c.Request.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter username: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EditTender(c, tenderId, params)
}

// RollbackTender operation middleware
func (siw *ServerInterfaceWrapper) RollbackTender(c *gin.Context) {

	var err error

	// ------------- Path parameter "tenderId" -------------
	var tenderId TenderId

	err = runtime.BindStyledParameterWithOptions("simple", "tenderId", c.Param("tenderId"), &tenderId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tenderId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version int32

	err = runtime.BindStyledParameterWithOptions("simple", "version", c.Param("version"), &version, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params RollbackTenderParams

	// ------------- Required query parameter "username" -------------

	if paramValue := c.Query("username"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument username is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "username", c.Request.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter username: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RollbackTender(c, tenderId, version, params)
}

// GetTenderStatus operation middleware
func (siw *ServerInterfaceWrapper) GetTenderStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "tenderId" -------------
	var tenderId TenderId

	err = runtime.BindStyledParameterWithOptions("simple", "tenderId", c.Param("tenderId"), &tenderId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tenderId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTenderStatusParams

	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", c.Request.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter username: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTenderStatus(c, tenderId, params)
}

// UpdateTenderStatus operation middleware
func (siw *ServerInterfaceWrapper) UpdateTenderStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "tenderId" -------------
	var tenderId TenderId

	err = runtime.BindStyledParameterWithOptions("simple", "tenderId", c.Param("tenderId"), &tenderId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tenderId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateTenderStatusParams

	// ------------- Required query parameter "status" -------------

	if paramValue := c.Query("status"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument status is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "username" -------------

	if paramValue := c.Query("username"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument username is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "username", c.Request.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter username: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateTenderStatus(c, tenderId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/bids-tender/:tenderId/list", wrapper.GetBidsForTender)
	router.GET(options.BaseURL+"/bids-tender/:tenderId/reviews", wrapper.GetBidReviews)
	router.GET(options.BaseURL+"/bids/my", wrapper.GetUserBids)
	router.POST(options.BaseURL+"/bids/new", wrapper.CreateBid)
	router.PATCH(options.BaseURL+"/bids/:bidId/edit", wrapper.EditBid)
	router.PUT(options.BaseURL+"/bids/:bidId/feedback", wrapper.SubmitBidFeedback)
	router.PUT(options.BaseURL+"/bids/:bidId/rollback/:version", wrapper.RollbackBid)
	router.GET(options.BaseURL+"/bids/:bidId/status", wrapper.GetBidStatus)
	router.PUT(options.BaseURL+"/bids/:bidId/status", wrapper.UpdateBidStatus)
	router.PUT(options.BaseURL+"/bids/:bidId/submit_decision", wrapper.SubmitBidDecision)
	router.GET(options.BaseURL+"/ping", wrapper.CheckServer)
	router.GET(options.BaseURL+"/tenders", wrapper.GetTenders)
	router.GET(options.BaseURL+"/tenders/my", wrapper.GetUserTenders)
	router.POST(options.BaseURL+"/tenders/new", wrapper.CreateTender)
	router.PATCH(options.BaseURL+"/tenders/:tenderId/edit", wrapper.EditTender)
	router.PUT(options.BaseURL+"/tenders/:tenderId/rollback/:version", wrapper.RollbackTender)
	router.GET(options.BaseURL+"/tenders/:tenderId/status", wrapper.GetTenderStatus)
	router.PUT(options.BaseURL+"/tenders/:tenderId/status", wrapper.UpdateTenderStatus)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//AwfMD5KRAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
